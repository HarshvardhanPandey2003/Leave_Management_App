name: Deploy Leave Management System to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ec2-user
      EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/leave-frontend:latest

      - name: Build and push backend image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/leave-backend:latest

      # PostgreSQL uses the official image, no need to build or push

      - name: Copy docker-compose file to EC2
        run: |
          echo "${{ env.EC2_SSH_PRIVATE_KEY }}" > private_key && chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/docker-compose.prod.yml

      - name: Deploy to EC2 with Docker Compose
        run: |
          echo "${{ env.EC2_SSH_PRIVATE_KEY }}" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            set -e
            sudo systemctl start docker
            sudo systemctl enable docker

            # Pull latest images
            sudo docker pull ${{ env.DOCKERHUB_USERNAME }}/leave-frontend:latest
            sudo docker pull ${{ env.DOCKERHUB_USERNAME }}/leave-backend:latest
            sudo docker pull postgres:latest

            # Stop and remove existing containers
            sudo docker compose -f docker-compose.prod.yml down || true

            # Start all services
            sudo docker compose -f docker-compose.prod.yml up -d --remove-orphans

            # Optional: Clean up dangling images
            sudo docker image prune -f
          "

      - name: Verify deployment
        run: |
          echo "Deployment completed. Check your app at http://${{ env.EC2_HOST }}"
